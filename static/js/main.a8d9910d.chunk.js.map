{"version":3,"sources":["components/LinkCard.module.scss","Home.module.scss","assets/github.svg","assets/website.svg","components/LinkCard.js","mock/siteList.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LinkCard","props","className","styles","card","style","background","bgColor","header","title","desc","links","src","WEBSITE_ICON","alt","marginRight","onClick","window","open","url","GITHUB_ICON","repo","SITE_LIST","logo","name","description","Home","wrapper","map","item","index","key","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,QAAU,0BAA0B,KAAO,uBAAuB,OAAS,yBAAyB,KAAO,uBAAuB,MAAQ,0B,kBCA5JD,EAAOC,QAAU,CAAC,QAAU,wB,gBCD5BD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,uMCKpC,SAASC,EAASC,GACvB,OACE,yBACEC,UAAWC,IAAOC,MAGlB,yBAAKC,MAAO,CAAEC,WAAYL,EAAMM,SAAWL,UAAWC,IAAOK,QAC1DP,EAAMQ,OAET,yBAAKP,UAAWC,IAAOO,MAAOT,EAAMS,MACpC,yBAAKR,UAAWC,IAAOQ,OACrB,yBACEC,IAAKC,IACLC,IAAI,UACJT,MAAO,CAAEU,YAAa,QACtBC,QAAS,kBAAMC,OAAOC,KAAKjB,EAAMkB,QAEnC,yBACEP,IAAKQ,IACLN,IAAI,SACJE,QAAS,kBAAMC,OAAOC,KAAKjB,EAAMoB,WCzBpC,IAAMC,EAAY,CACvB,CACEH,IAAK,4BACLI,KAAM,GACNC,KAAM,UACNC,YAAa,0CACbJ,KAAM,wCACNd,QAAS,sBAEX,CACEY,IAAK,kCACLI,KAAM,GACNC,KAAM,iBACNC,YAAa,mDACbJ,KAAM,+CACNd,QAAS,qBAEX,CACEY,IAAK,mDACLI,KAAM,GACNC,KAAM,eACNC,YAAa,yDACbJ,KAAM,mDACNd,QAAS,qBAEX,CACEY,IAAK,8CACLI,KAAM,GACNC,KAAM,UACNC,YAAa,2HACbJ,KAAM,8CACNd,QAAS,sBC1BN,SAASmB,IACd,OACE,yBAAKxB,UAAWC,IAAOwB,SACpBL,EAAUM,KAAI,SAACC,EAAMC,GAAP,OACb,kBAAC9B,EAAD,CACE+B,IAAKD,EACLrB,MAAOoB,EAAKL,KACZL,IAAKU,EAAKV,IACVZ,QAASsB,EAAKtB,QACdG,KAAMmB,EAAKJ,YACXJ,KAAMQ,EAAKR,WCRNW,MAJf,WACE,OAAO,kBAACN,EAAD,OCQWO,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a8d9910d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LinkCard_wrapper__1bYUQ\",\"card\":\"LinkCard_card__3dvzJ\",\"header\":\"LinkCard_header__3oAOP\",\"desc\":\"LinkCard_desc__2ER8u\",\"links\":\"LinkCard_links__1uteP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Home_wrapper__337o_\"};","module.exports = __webpack_public_path__ + \"static/media/github.04f7f486.svg\";","module.exports = __webpack_public_path__ + \"static/media/website.1102dd99.svg\";","import React from \"react\";\nimport styles from \"./LinkCard.module.scss\";\nimport GITHUB_ICON from \"../assets/github.svg\";\nimport WEBSITE_ICON from \"../assets/website.svg\";\n\nexport function LinkCard(props) {\n  return (\n    <div\n      className={styles.card}\n      // onClick={() => window.open(props.url)}\n    >\n      <div style={{ background: props.bgColor }} className={styles.header}>\n        {props.title}\n      </div>\n      <div className={styles.desc}>{props.desc}</div>\n      <div className={styles.links}>\n        <img\n          src={WEBSITE_ICON}\n          alt=\"website\"\n          style={{ marginRight: \"20px\" }}\n          onClick={() => window.open(props.url)}\n        />\n        <img\n          src={GITHUB_ICON}\n          alt=\"github\"\n          onClick={() => window.open(props.repo)}\n        />\n      </div>\n    </div>\n  );\n}\n","export const SITE_LIST = [\n  {\n    url: \"https://dolphin.surge.sh/\",\n    logo: \"\",\n    name: \"Dolphin\",\n    description: \"JavaScript原生API的polyfill\",\n    repo: \"https://github.com/tangweikun/dolphin\",\n    bgColor: \"rgb(255, 114, 129)\"\n  },\n  {\n    url: \"http://building-block.surge.sh/\",\n    logo: \"\",\n    name: \"Building Block\",\n    description: \"一个简单的组件库\",\n    repo: \"https://github.com/tangweikun/building-block\",\n    bgColor: \"rgb(64, 196, 255)\"\n  },\n  {\n    url: \"https://tangweikun.github.io/happy-beauty-stars/\",\n    logo: \"\",\n    name: \"Beauty Stars\",\n    description: \"一个简单的评分组件\",\n    repo: \"https://github.com/tangweikun/happy-beauty-stars\",\n    bgColor: \"rgb(255, 157, 68)\"\n  },\n  {\n    url: \"https://tangweikun.github.io/happy-clicker/\",\n    logo: \"\",\n    name: \"Clicker\",\n    description: \"一个简单的计数器，可以'加一'，'减一'和'重置'\",\n    repo: \"https://github.com/tangweikun/happy-clicker\",\n    bgColor: \"rgb(140, 216, 66)\"\n  }\n  // {\n  //   url: \"https://tangweikun.github.io/happy-clicker/\",\n  //   logo: \"\",\n  //   name: \"Clicker\",\n  //   description: \"\",\n  //   repo: \"\",\n  //   bgColor: \"rgb(140, 216, 66)\"\n  // }\n];\n","import React from \"react\";\nimport styles from \"./Home.module.scss\";\nimport { LinkCard } from \"./components/LinkCard\";\nimport { SITE_LIST } from \"./mock/siteList\";\n\nexport function Home() {\n  return (\n    <div className={styles.wrapper}>\n      {SITE_LIST.map((item, index) => (\n        <LinkCard\n          key={index}\n          title={item.name}\n          url={item.url}\n          bgColor={item.bgColor}\n          desc={item.description}\n          repo={item.repo}\n        />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport { Home } from './Home';\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}